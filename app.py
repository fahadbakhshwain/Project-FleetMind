import streamlit as st
import pandas as pd
import joblib
import numpy as np

# --- ╪к┘З┘К╪ж╪й ╪е╪╣╪п╪з╪п╪з╪к ╪з┘Д╪╡┘Б╪н╪й ---
st.set_page_config(
    page_title="╪к╪╖╪и┘К┘В ╪к┘И┘В╪╣ ╪з┘Д╪╖┘Д╪и ╪╣┘Д┘Й ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к",
    page_icon="ЁЯЪЧ",
    layout="centered"
)

# --- ╪к╪н┘Е┘К┘Д ╪з┘Д┘Ж┘Е┘И╪░╪м ---
# ┘З╪░╪з ╪з┘Д┘Ж┘Е┘И╪░╪м ╪к┘Е ╪к╪п╪▒┘К╪и┘З ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╖┘Д╪и ╪з┘Д╪п╪▒╪з╪м╪з╪к╪М ┘И┘Д┘К╪│ ╪з┘Д╪│┘К╪з╪▒╪з╪к.
# ╪з┘Д╪к┘Ж╪и╪д╪з╪к ╪│╪к┘Г┘И┘Ж ╪║┘К╪▒ ╪п┘В┘К┘В╪й ┘Д┘З╪░╪з ╪з┘Д╪│╪и╪и.
try: # ╪и╪п╪з┘К╪й ┘Г╪к┘Д╪й try
    # ╪к╪г┘Г╪п ┘Е┘Ж ╪г┘Ж ┘З╪░╪з ┘З┘И ┘Е╪│╪з╪▒ ┘И╪з╪│┘Е ┘Е┘Д┘Б ┘Е┘И╪п┘К┘Д ╪к┘И┘В╪╣ ╪з┘Д╪╖┘Д╪и ╪╣┘Д┘Й ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪з┘Д╪о╪з╪╡ ╪и┘Г
    # ┘Д╪з╪н╪╕ ╪з┘Д┘Е╪│╪з┘Б╪й ┘З┘Ж╪з (indentation)
    model = joblib.load('notebooks/models/random_forest_demand_model.joblib')
except FileNotFoundError: # ┘Ж┘З╪з┘К╪й ┘Г╪к┘Д╪й try╪М ┘И╪и╪п╪з┘К╪й ┘Г╪к┘Д╪й except (┘Ж┘Б╪│ ┘Е╪│╪з┘Б╪й try)
    st.error("┘Е┘Д┘Б ╪з┘Д┘Ж┘Е┘И╪░╪м (random_forest_demand_model.joblib) ╪║┘К╪▒ ┘Е┘И╪м┘И╪п! ┘К╪▒╪м┘Й ╪з┘Д╪к╪г┘Г╪п ┘Е┘Ж ┘И╪м┘И╪п┘З ┘Б┘К ┘Е╪м┘Д╪п 'models' ╪п╪з╪о┘Д 'notebooks'.")
    st.stop()

# --- ╪к╪╣╪▒┘К┘Б ╪з┘Д╪г╪╣┘Е╪п╪й ╪з┘Д┘Е╪к┘И┘В╪╣╪й ┘Е┘Ж ╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪к╪п╪▒┘К╪и ╪з┘Д╪г╪╡┘Д┘К╪й (╪╖┘Д╪и ╪з┘Д╪п╪▒╪з╪м╪з╪к) ---
# ┘З╪░┘З ╪з┘Д╪г╪╣┘Е╪п╪й ┘З┘К ┘Е┘Ж ┘Е┘И╪п┘К┘Д ╪к╪п╪▒╪и ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╖┘Д╪и ╪з┘Д╪п╪▒╪з╪м╪з╪к.
# ╪│╪к╪н╪к╪з╪м ┘Д╪к╪н╪п┘К╪л ┘З╪░┘З ╪з┘Д┘В╪з╪ж┘Е╪й ╪и╪з┘Д┘Г╪з┘Е┘Д ╪╣┘Ж╪п ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╖┘Д╪и ╪з┘Д╪│┘К╪з╪▒╪з╪к.
expected_columns_bike_demand = [
    'season', 'yr', 'mnth', 'hr', 'holiday', 'weekday', 'workingday',
    'weathersit', 'temp', 'atemp', 'hum', 'windspeed'
]


# --- ╪╣┘Ж┘И╪з┘Ж ╪з┘Д╪к╪╖╪и┘К┘В ┘И╪з┘Д┘И╪╡┘Б ---
st.title('ЁЯЪЧ ╪к╪╖╪и┘К┘В ╪к┘И┘В╪╣ ╪з┘Д╪╖┘Д╪и ╪╣┘Д┘Й ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к')
st.write(
    "┘К╪│╪з╪╣╪п ┘З╪░╪з ╪з┘Д╪к╪╖╪и┘К┘В ╪┤╪▒┘Г╪з╪к ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к ╪╣┘Д┘Й ╪з┘Д╪к┘Ж╪и╪д ╪и╪з┘Д╪╖┘Д╪и ╪з┘Д┘К┘И┘Е┘К/╪з┘Д╪┤┘З╪▒┘К ╪╣┘Д┘Й ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к ╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ╪з┘Д╪╣┘И╪з┘Е┘Д ╪з┘Д╪▒╪ж┘К╪│┘К╪й."
)
st.write("---")

# --- ┘Е╪п╪о┘Д╪з╪к ╪з┘Д┘Е╪│╪к╪о╪п┘Е (╪з┘Д╪м╪п┘К╪п╪й ┘Д╪╖┘Д╪и ╪з┘Д╪│┘К╪з╪▒╪з╪к) ---
col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д┘И┘В╪к ┘И╪з┘Д┘Е┘И┘В╪╣")
    prediction_year = st.selectbox('╪з┘Д╪│┘Ж╪й', list(range(2023, 2028)), index=0)
    prediction_month = st.selectbox('╪з┘Д╪┤┘З╪▒', list(range(1, 13)), index=0)
    prediction_day_of_week = st.selectbox('╪з┘Д┘К┘И┘Е ┘Е┘Ж ╪з┘Д╪г╪│╪и┘И╪╣', ['╪з┘Д╪з╪н╪п', '╪з┘Д╪з╪л┘Ж┘К┘Ж', '╪з┘Д╪л┘Д╪з╪л╪з╪б', '╪з┘Д╪з╪▒╪и╪╣╪з╪б', '╪з┘Д╪о┘Е┘К╪│', '╪з┘Д╪м┘Е╪╣╪й', '╪з┘Д╪│╪и╪к'])
    prediction_hour = st.slider('╪з┘Д╪│╪з╪╣╪й ┘Е┘Ж ╪з┘Д┘К┘И┘Е (0-23)', 0, 23, 10)

with col2:
    st.subheader("┘Ж┘И╪╣ ╪з┘Д╪│┘К╪з╪▒╪й ┘И╪з┘Д╪╣┘Е┘К┘Д")
    car_type = st.selectbox('┘Ж┘И╪╣ ╪з┘Д╪│┘К╪з╪▒╪й ╪з┘Д┘Е╪╖┘Д┘И╪и', ['╪з┘В╪к╪╡╪з╪п┘К', '╪│┘К╪п╪з┘Ж', '╪п┘Б╪╣ ╪▒╪и╪з╪╣┘К', '┘Б╪з┘Ж', '┘Б╪з╪о╪▒╪й'])
    rental_location = st.selectbox('┘Е┘И┘В╪╣ ╪з┘Д╪к╪г╪м┘К╪▒', ['╪з┘Д┘Е╪╖╪з╪▒', '┘И╪│╪╖ ╪з┘Д┘Е╪п┘К┘Ж╪й', '┘Б┘Ж╪п┘В', '┘Е╪н┘Д┘С┘К', '╪в╪о╪▒'])
    customer_type = st.selectbox('┘Ж┘И╪╣ ╪з┘Д╪╣┘Е┘К┘Д', ['┘Б╪▒╪п┘К', '╪┤╪▒┘Г╪з╪к', '╪│┘К╪з╪н'])

with col3:
    st.subheader("╪╣┘И╪з┘Е┘Д ╪е╪╢╪з┘Б┘К╪й")
    # ┘К┘Е┘Г┘Ж ┘З┘Ж╪з ╪е╪╢╪з┘Б╪й ╪╣┘И╪з┘Е┘Д ┘Е╪л┘Д: ┘З┘Д ┘З┘И ╪н╪п╪л ╪о╪з╪╡╪Я ╪╖┘В╪│╪Я (╪│╪к╪н╪к╪з╪м ┘Д╪и┘К╪з┘Ж╪з╪к ┘Д┘З╪░┘З ╪з┘Д╪╣┘И╪з┘Е┘Д)
    is_holiday = st.radio('┘З┘Д ┘З┘И ┘К┘И┘Е ╪╣╪╖┘Д╪й ╪г┘И ┘Е┘Ж╪з╪│╪и╪й ╪о╪з╪╡╪й╪Я', ['┘Ж╪╣┘Е', '┘Д╪з'])
    # ╪п╪▒╪м╪й ╪н╪▒╪з╪▒╪й ┘И┘З┘Е┘К╪й ┘И╪▒╪╖┘И╪и╪й ┘Д╪г┘Ж ╪з┘Д┘Ж┘Е┘И╪░╪м ╪з┘Д╪н╪з┘Д┘К ┘К╪│╪к╪о╪п┘Е┘З╪з
    # ┘З╪░┘З ╪з┘Д┘Е╪п╪о┘Д╪з╪к ┘Д┘Ж ╪к┘Г┘И┘Ж ╪░╪з╪к ┘Е╪╣┘Ж┘Й ┘Д╪╖┘Д╪и ╪з┘Д╪│┘К╪з╪▒╪з╪к ╪и╪п┘И┘Ж ┘Е┘И╪п┘К┘Д ╪м╪п┘К╪п
    temp_placeholder = st.slider('╪п╪▒╪м╪й ╪з┘Д╪н╪▒╪з╪▒╪й (╪к┘В╪п┘К╪▒┘К╪й)', 0.0, 1.0, 0.5, help="╪к┘В╪п┘К╪▒ ┘Д┘Д╪н╪▒╪з╪▒╪й╪М ╪│┘К╪к┘Е ╪з╪│╪к╪о╪п╪з┘Е┘З ┘Б┘К ┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪з┘Д┘В╪п┘К┘Е.")
    hum_placeholder = st.slider('╪з┘Д╪▒╪╖┘И╪и╪й (╪к┘В╪п┘К╪▒┘К╪й)', 0.0, 1.0, 0.5, help="╪к┘В╪п┘К╪▒ ┘Д┘Д╪▒╪╖┘И╪и╪й╪М ╪│┘К╪к┘Е ╪з╪│╪к╪о╪п╪з┘Е┘З ┘Б┘К ┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪з┘Д┘В╪п┘К┘Е.")


# --- ┘Е┘Ж╪╖┘В ╪з┘Д╪к┘Ж╪и╪д ---
if st.button('╪к┘И┘В╪╣ ╪з┘Д╪╖┘Д╪и', type="primary"):
    # ╪и┘Ж╪з╪б ┘В╪з┘Е┘И╪│ ┘Е┘Ж ╪з┘Д┘Е╪п╪о┘Д╪з╪к ╪з┘Д╪м╪п┘К╪п╪й.
    # ┘Е┘Д╪з╪н╪╕╪й: ┘З╪░┘З ╪з┘Д┘Е╪п╪о┘Д╪з╪к ╪з┘Д╪м╪п┘К╪п╪й ╪│┘К╪к┘Е ╪к╪н┘И┘К┘Д┘З╪з ┘В╪│╪▒┘К╪з┘Л ┘Д╪к┘Ж╪з╪│╪и ┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪з┘Д┘В╪п┘К┘Е╪М
    # ┘Д╪░╪з ╪з┘Д╪к┘Ж╪и╪д╪з╪к ╪│╪к┘Г┘И┘Ж ╪║┘К╪▒ ╪п┘В┘К┘В╪й.

    # ╪з┘Д┘В┘К┘Е ╪з┘Д╪к┘К ┘К╪н╪к╪з╪м┘З╪з ┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к (┘Е╪л╪з┘Д: ┘К╪▒╪к╪и╪╖ ╪и┘А expected_columns_bike_demand)
    # ┘К╪м╪и ╪г┘Ж ╪к╪к╪╖╪з╪и┘В ┘З╪░┘З ╪з┘Д╪г╪│┘Е╪з╪б ┘Е╪╣ ╪г╪│┘Е╪з╪б ╪з┘Д╪г╪╣┘Е╪п╪й ┘Б┘К ╪и┘К╪з┘Ж╪з╪к ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к
    # ┘И┘К╪м╪и ╪г┘Ж ┘К╪к┘Е ╪к╪н┘И┘К┘Д ╪з┘Д┘В┘К┘Е ┘Е┘Ж ┘И╪з╪м┘З╪й ╪з┘Д┘Е╪│╪к╪о╪п┘Е ┘Д╪к┘Ж╪з╪│╪и┘З╪з.
    input_features = {
        'season': prediction_month, # ╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д╪┤┘З╪▒ ┘Г┘Е╪д╪┤╪▒ ┘Д┘Д┘Е┘И╪│┘Е
        'yr': prediction_year - 2011, # ╪к╪н┘И┘К┘Д ╪з┘Д╪│┘Ж╪й ┘Д┘Ж╪│╪и╪й ┘Г┘Е╪з ┘Б┘К ╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪п╪▒╪з╪м╪з╪к
        'mnth': prediction_month,
        'hr': prediction_hour,
        'holiday': 1 if is_holiday == '┘Ж╪╣┘Е' else 0,
        'weekday': ['╪з┘Д╪з╪н╪п', '╪з┘Д╪з╪л┘Ж┘К┘Ж', '╪з┘Д╪л┘Д╪з╪л╪з╪б', '╪з┘Д╪з╪▒╪и╪╣╪з╪б', '╪з┘Д╪о┘Е┘К╪│', '╪з┘Д╪м┘Е╪╣╪й', '╪з┘Д╪│╪и╪к'].index(prediction_day_of_week),
        'workingday': 1 if prediction_day_of_week not in ['╪з┘Д╪м┘Е╪╣╪й', '╪з┘Д╪│╪и╪к'] and is_holiday == '┘Д╪з' else 0,
        'weathersit': 1, # ┘В┘К┘Е╪й ╪з┘Б╪к╪▒╪з╪╢┘К╪й ┘Д┘Д╪╖┘В╪│ (clear)
        'temp': temp_placeholder,
        'atemp': temp_placeholder, # ┘В╪п ┘К┘Г┘И┘Ж ┘Ж┘Б╪│ temp ┘Б┘К ┘З╪░╪з ╪з┘Д╪│┘К╪з┘В
        'hum': hum_placeholder,
        'windspeed': 0.2 # ┘В┘К┘Е╪й ╪з┘Б╪к╪▒╪з╪╢┘К╪й
    }

    # ╪к╪н┘И┘К┘Д ╪з┘Д┘В╪з┘Е┘И╪│ ╪е┘Д┘Й DataFrame
    input_df_for_prediction = pd.DataFrame([input_features])

    # ╪е╪╣╪з╪п╪й ╪к╪▒╪к┘К╪и ╪з┘Д╪г╪╣┘Е╪п╪й ┘Д╪к╪╖╪з╪и┘В ╪к╪▒╪к┘К╪и ╪г╪╣┘Е╪п╪й ╪з┘Д╪к╪п╪▒┘К╪и ┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪и╪з┘Д╪╢╪и╪╖
    input_df_for_prediction = input_df_for_prediction[expected_columns_bike_demand]

    # ╪е╪м╪▒╪з╪б ╪з┘Д╪к┘Ж╪и╪д ╪и╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д┘Ж┘Е┘И╪░╪м ╪з┘Д┘Е╪п╪▒╪и (┘Е┘И╪п┘К┘Д ╪з┘Д╪п╪▒╪з╪м╪з╪к ╪з┘Д╪н╪з┘Д┘К)
    predicted_demand = model.predict(input_df_for_prediction)[0]

    st.write("---")
    st.subheader("┘Ж╪к┘К╪м╪й ╪з┘Д╪к┘Ж╪и╪д ╪и╪з┘Д╪╖┘Д╪и:")

    st.success(f" ╪з┘Д╪╣╪п╪п ╪з┘Д┘Е╪к┘И┘В╪╣ ┘Д┘Д╪│┘К╪з╪▒╪з╪к ╪з┘Д┘Е╪╖┘Д┘И╪и╪й: {int(predicted_demand)} ╪│┘К╪з╪▒╪й")

    st.write("---")
    st.warning("тЪая╕П ┘Е┘Д╪з╪н╪╕╪й ┘З╪з┘Е╪й ╪м╪п╪з┘Л: ┘З╪░╪з ╪з┘Д╪к┘Ж╪и╪д ╪║┘К╪▒ ╪п┘В┘К┘В ╪н╪з┘Д┘К╪з┘Л! ╪з┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪н╪з┘Д┘К ╪к┘Е ╪к╪п╪▒┘К╪и┘З ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╖┘Д╪и ╪з┘Д╪п╪▒╪з╪м╪з╪к╪М ┘И┘Д┘К╪│ ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к. ╪з┘Д╪к┘Ж╪и╪д╪з╪к ┘З┘К ╪╣╪┤┘И╪з╪ж┘К╪й ┘И┘Д┘К╪│╪к ╪░╪з╪к ╪╡┘Д╪й.")
    st.info("╪з┘Д╪о╪╖┘И╪й ╪з┘Д╪к╪з┘Д┘К╪й ╪з┘Д╪н╪з╪│┘Е╪й: ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪░┘Г╪з╪б ╪з╪╡╪╖┘Ж╪з╪╣┘К ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪к╪з╪▒┘К╪о┘К╪й ╪н┘В┘К┘В┘К╪й ┘Д╪╖┘Д╪и ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к╪М ╪л┘Е ╪к╪н╪п┘К╪л ╪з┘Д┘Г┘И╪п ┘Д┘К╪╣┘Г╪│ ┘З╪░╪з ╪з┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪м╪п┘К╪п.")

